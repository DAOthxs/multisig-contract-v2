#include "imports/stdlib.fc";
#include "types.func";
#include "op-codes.func";
#include "errors.func";
#include "messages.func";
#include "order_helpers.func";

int validate_dictionary_sequence(cell dict) impure inline {
    int index = -1;
    int expected_index = 0;
    do {
        (index, slice value, int found?) = dict.udict_get_next?(INDEX_SIZE, index);
        if (found?) {
            throw_unless(error::invalid_dictionary_sequence, index == expected_index);
            expected_index += 1;
        }
    } until (~ found?);
    return expected_index;
}

int is_valid_outgoing_message(cell msg) impure inline {
    ;; https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L135
    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    ;; src:MsgAddress dest:MsgAddressInt
    ;; value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
    ;; created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;

    ;; https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L123C1-L124C33
    ;; currencies$_ grams:Grams other:ExtraCurrencyCollection = CurrencyCollection;

    ;; https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L155
    ;;
    ;;message$_ {X:Type} info:CommonMsgInfoRelaxed
    ;;  init:(Maybe (Either StateInit ^StateInit))
    ;;  body:(Either X ^X) = MessageRelaxed X;

    slice cs = msg.begin_parse();
    int msg_flags = cs~load_msg_flags();
    slice sender_address = cs~load_msg_addr();
    slice destination_address = cs~load_msg_addr();
    int value = cs~load_coins();
    cell extracurrency_collection = cs~load_maybe_ref();
    int ihr_fee = cs~load_coins();
    int fwd_fee = cs~load_coins();
    int created_lt = cs~load_uint(64);
    int created_at = cs~load_uint(32);
    int has_state_init = cs~load_bool();
    if(has_state_init) {
        int either_state_init = cs~load_bool();
        if(either_state_init) {
            cell init_state = cs~load_ref();
        } else {
            ;; https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L144C1-L146C37
            ;; _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
            ;;  code:(Maybe ^Cell) data:(Maybe ^Cell)
            ;;  library:(Maybe ^Cell) = StateInit;

            if (cs~load_bool()) { ;;split_depth: Maybe
                cs~skip_bits(5);
            }
            if(cs~load_bool()) { ;;special: Maybe
                cs~skip_bits(2);
            }
            cell code = cs~load_maybe_ref();
            cell data = cs~load_maybe_ref();
            cell library = cs~load_maybe_ref();
        }
    }
    int either_body = cs~load_bool();
    slice body = cs;
    if (either_body) {
        body = cs.preload_ref().begin_parse();
    }

    if(body.slice_bits() < 32) {
        return true;
    }
    int op = body~load_op();

    if (op == op::init) {
        return false;
    }

    if (equal_slices_bits(destination_address, my_address()) & (op != op::execute_internal)) {
        return false;
    }

    return true;
}

((int, cell, int, cell), ()) ~execute_order((int, cell, int, cell) storage, cell order_body) impure inline {

    accept_message();

    (int threshold, cell signers, int signers_num, cell proposers) = storage;

    int action_index = -1;
    do {
        (action_index, slice action, int found?) = order_body.udict_get_next?(ACTION_INDEX_SIZE, action_index);
        if (found?) {
            action = action.preload_ref().begin_parse();
            int action_op = action~load_op();
            if (action_op == actions::send_message) {
                int mode = action~load_uint(8);
                cell msg = action~load_ref();
                action.end_parse();
                throw_unless( error::invalid_out_message, is_valid_outgoing_message(msg));

                send_raw_message(msg, mode);
            } elseif (action_op == actions::update_multisig_params) {
                threshold = action~load_index();
                signers = action~load_nonempty_dict();
                signers_num = validate_dictionary_sequence(signers);
                throw_unless(error::invalid_signers, signers_num >= 1);
                throw_unless(error::invalid_threshold, threshold > 0);
                throw_unless(error::invalid_threshold, threshold <= signers_num);

                proposers = action~load_dict();
                validate_dictionary_sequence(proposers);

                action.end_parse();
            }
        }
    } until (~ found?);

    return ((threshold, signers, signers_num, proposers), ());
}


(int, int, cell, int, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    var data = (
        ds~load_order_seqno(), ;; next_order_seqno
        ds~load_index(), ;; threshold
        ds~load_nonempty_dict(), ;; signers
        ds~load_index(), ;; signers_num
        ds~load_dict(), ;; proposers
        ds~load_bool()  ;; allow_arbitrary_order_seqno
    );
    ds.end_parse();
    return data;
}

() save_data(int next_order_seqno, int threshold, cell signers, int signers_num, cell proposers, int allow_arbitrary_order_seqno) impure inline {
    set_data(
        begin_cell()
        .store_order_seqno(next_order_seqno)
        .store_index(threshold)
        .store_nonempty_dict(signers)
        .store_index(signers_num)
        .store_dict(proposers)
        .store_bool(allow_arbitrary_order_seqno)
        .end_cell()
    );
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();
    if (is_bounced(msg_flags)) {
        return ();
    }
    slice sender_address = in_msg_full_slice~load_msg_addr();

    if (in_msg_body.slice_bits() == 0) {
        return (); ;; empty message - just accept TONs
    }

    int op = in_msg_body~load_op();

    if (op == 0) {
        return (); ;; simple text message - just accept TONs
    }

    int query_id = in_msg_body~load_query_id();

    (int next_order_seqno, int threshold, cell signers, int signers_num, cell proposers, int allow_arbitrary_order_seqno) = load_data();

    if (op == op::new_order) {
        int order_seqno = in_msg_body~load_order_seqno();
        if (~ allow_arbitrary_order_seqno) {
            if (order_seqno == MAX_ORDER_SEQNO) {
                order_seqno = next_order_seqno;
            } else {
                throw_unless(error::invalid_new_order, (order_seqno == next_order_seqno));
            }
            next_order_seqno += 1;
        }

        int signer? = in_msg_body~load_bool();
        int index = in_msg_body~load_index();
        int expiration_date = in_msg_body~load_timestamp();
        cell order_body = in_msg_body~load_ref();
        in_msg_body.end_parse();
        (slice expected_address, int found?) = (signer? ? signers : proposers).udict_get?(INDEX_SIZE, index);
        throw_unless(error::unauthorized_new_order, found?);
        throw_unless(error::unauthorized_new_order, equal_slices_bits(sender_address, expected_address));
        throw_unless(error::expired, expiration_date >= now());

        int minimal_value = calculate_order_processing_cost(order_body, signers, expiration_date - now());
        throw_unless(error::not_enough_ton, msg_value >= minimal_value);

        cell state_init = calculate_order_state_init(my_address(), order_seqno);
        slice order_address = calculate_address_by_state_init(BASECHAIN, state_init);
        builder init_body = begin_cell()
        .store_op_and_query_id(op::init, query_id)
        .store_index(threshold)
        .store_nonempty_dict(signers)
        .store_timestamp(expiration_date)
        .store_ref(order_body)
        .store_bool(signer?);
        if (signer?) {
            init_body = init_body.store_index(index);
        }
        send_message_with_state_init_and_body(
            order_address,
            0,
            state_init,
            init_body,
            BOUNCEABLE,
            SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL
        );

    } elseif (op == op::execute) {
        ;; check that sender is order smart-contract and check that it has recent
        ;; signers dict

        int order_seqno = in_msg_body~load_order_seqno();
        int expiration_date = in_msg_body~load_timestamp();
        int approvals_num = in_msg_body~load_index();
        int signers_hash = in_msg_body~load_hash();
        cell order_body = in_msg_body~load_ref();
        in_msg_body.end_parse();

        cell state_init = calculate_order_state_init(my_address(), order_seqno);
        slice order_address = calculate_address_by_state_init(BASECHAIN, state_init);

        throw_unless(error::unauthorized_execute, equal_slices_bits(sender_address, order_address));
        throw_unless(error::singers_outdated, (signers_hash == signers.cell_hash()) & (approvals_num >= threshold));
        throw_unless(error::expired, expiration_date >= now());

        (threshold, signers, signers_num, proposers)~execute_order(order_body);
    } elseif (op == op::execute_internal) {
        ;; we always trust ourselves, this feature is used to make chains of executions
        ;; where last action of previous execution triggers new one.

        throw_unless(error::unauthorized_execute, equal_slices_bits(sender_address, my_address()));
        cell order_body = in_msg_body~load_ref();
        in_msg_body.end_parse();
        (threshold, signers, signers_num, proposers)~execute_order(order_body);
    }

    save_data(next_order_seqno, threshold, signers, signers_num, proposers, allow_arbitrary_order_seqno);
}

(int, int, cell, cell) get_multisig_data() method_id {
    (int next_order_seqno, int threshold, cell signers, int signers_num, cell proposers, int allow_arbitrary_order_seqno) = load_data();
    throw_unless(error::inconsistent_data, signers_num == validate_dictionary_sequence(signers));
    validate_dictionary_sequence(proposers);
    return (allow_arbitrary_order_seqno ? -1 : next_order_seqno, threshold, signers, proposers);
}

int get_order_estimate(cell order, int expiration_date) method_id {
    (_, _, cell signers, _, _, _) = load_data();
    return calculate_order_processing_cost(order, signers, expiration_date - now());
}

slice get_order_address(int order_seqno) method_id {
    cell state_init = calculate_order_state_init(my_address(), order_seqno);
    return calculate_address_by_state_init(BASECHAIN, state_init);
}
