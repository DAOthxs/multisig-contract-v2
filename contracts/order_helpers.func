#include "imports/stdlib.fc";
#include "types.func";
#include "auto/order_code.func";

cell order_init_data(slice multisig, int seqno) {
    return begin_cell().store_slice(multisig).store_order_seqno(seqno).end_cell();
}


cell calculate_order_state_init (slice multisig, int seqno) {
    return begin_cell()
            .store_uint(0, 1 + 1) ;; split_depth (Maybe = 0) and special (Maybe = 0)
            .store_maybe_ref(order_code())
            .store_maybe_ref(order_init_data(multisig, seqno))
            .store_uint(0,1) ;; libraries - empty cell
            .end_cell();
}

slice calculate_address_by_state_init(int workchain, cell state_init) inline {
    return begin_cell().store_uint(4, 3) ;; 0x100 : $10 + anycast (Maybe = 0)
            .store_int(workchain, 8)
            .store_uint(
                    cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

const int MULTISIG_INIT_ORDER_GAS = 11603; ;; 255 signers
const int ORDER_INIT_GAS = 5153;
const int ORDER_EXECUTE_GAS = 10108;
const int MULTISIG_EXECUTE_GAS = 8992; ;; For single transfer action order
;; we call number of bits/cells without order bits/cells as "overhead"
const int INIT_ORDER_BIT_OVERHEAD = 5172;
const int INIT_ORDER_CELL_OVERHEAD = 21;
const int ORDER_STATE_BIT_OVERHEAD = 5603;
const int ORDER_STATE_CELL_OVERHEAD = 21;
const int EXECUTE_ORDER_BIT_OVERHEAD = 440;
const int EXECUTE_ORDER_CELL_OVERHEAD = 1;

int calculate_order_processing_cost(cell order_body, int duration) {
    {- There are following costs:
       1) Gas cost on Multisig contract
       2) Forward cost for Multisig->Order message
       3) Gas cost on Order initialisation
       4) Storage cost on Order
       5) Gas cost on Order finalization
       6) Forward cost for Order->Multisig message
       7) Gas cost on Multisig till accept_message
    -}

    ;; compute_data_size is unpredictable in gas, so we need to measure gas prior to it and after
    ;; and add difference to MULTISIG_INIT_ORDER_GAS
    int initial_gas = gas_consumed();
    (int order_cells, int order_bits, _) = compute_data_size(order_body, 2048);
    int size_counting_gas = gas_consumed() - initial_gas;

    int gas_fees = get_compute_fee(BASECHAIN, MULTISIG_INIT_ORDER_GAS + size_counting_gas) +
                   get_compute_fee(BASECHAIN, ORDER_INIT_GAS) +
                   get_compute_fee(BASECHAIN, ORDER_EXECUTE_GAS) +
                   get_compute_fee(BASECHAIN, MULTISIG_EXECUTE_GAS);

    int forward_fees = get_forward_fee(BASECHAIN, INIT_ORDER_BIT_OVERHEAD + order_bits, INIT_ORDER_CELL_OVERHEAD + order_cells) +
                       get_forward_fee(BASECHAIN, EXECUTE_ORDER_BIT_OVERHEAD + order_bits, EXECUTE_ORDER_CELL_OVERHEAD + order_cells);


    int storage_fees = get_storage_fee(BASECHAIN, duration, order_bits, order_cells);
    return gas_fees + forward_fees + storage_fees;
}
